#+title: Repaso de Haskell
#+subtitle: Lógica Computacional
#+author: Edgar Quiroz
#+language: es
#+latex_header: \usepackage[spanish]{babel}
#+beamer_theme: Hannover
#+beamer_color_theme: dove
#+options: H:2

* Características
** ¿Cómo es Haskell?
+ Funcional
   - Priorizar la aplicación de funciones
+ Puro
  - Llamar dos veces a la misma función dará el mismo resultado
  - Si cada parte funciona, juntas funcionan
+ Sistema de tipos muy agradable
  - Permite trabajar con definiciones matemáticas fácilmente

* Tipos básicos
** Comentarios
#+begin_src haskell :tangle "lab.hs"
-- Dos guiones para comentar
{-
Llave guión para varias líneas
-}
#+end_src

** Tipos
+ ~(::)~ es el operador para asignar tipos, pero casi siempre Haskell los puede inferir

#+begin_src haskell :tangle "lab.hs"
-- hay enteros
n :: Int
n = 5

-- números de punto flotante
x :: Float
x = 5.6

-- caractéres
c :: Char
c = 'c'
#+end_src

** Operades aritméticos: ~+, -, *, /, div, mod, succ, pred~

#+begin_src haskell :tangle "lab.hs"
-- se puede usar haskell como una calculadora
suma = 1 + 3
resta = 2 - 10
producto = 4 * 5
division = 64 / 8
modulo = 18 `mod` 13
sucesor = succ 4
predecesor = pred 10
potencia = 3 ^ 2
#+end_src

** Operadores lógicos: ~&&, ||, not~

#+begin_src haskell :tangle "lab.hs"
-- una calculadora con valores booleanos también
conjuncion = True && False
disyuncion = False || True
negacion = not False
#+end_src

** Tuplas
+ Acceder elementos (solo para tuplas de dos)
#+begin_src haskell :tangle "lab.hs"
-- como lista de longitud fija
tpl :: (Int, Int)
tpl = (1, 2)

primero = fst tpl -- primer elemento
segundo = snd tpl -- segundo elemento
#+end_src

** Clases
+ El tipo de ~5~ es ~Num p => p~, donde ~p~ es un tipo que implemente la clase ~Num~.
+ Las clases son como interfaces en Java: ~Num, Show, Eq, Ord~
#+begin_src haskell
class Show a where
  show :: a -> String
#+end_src

* Funciones
** Definición
+ Nombre, argumentos y cuerpo
#+begin_src haskell :tangle "lab.hs"
-- declara funciones es muy fácil
masUno x = x + 1
#+end_src

** Tipo
+ ~->~ parece $\mapsto$, el símbolo para denotar el dominio y contradominio de una función en matemáticas
#+begin_src haskell :tangle "lab.hs"
-- es buena práctica ponerle el tipo a las funciones
sumaDos :: Int -> Int
sumaDos x = x + 2
#+end_src

** Operadores
+ Los operadores son funciones infijas, como ~+, &&~. Sólo pueden contener símbolos. Se deben declarar con paréntesis.
#+begin_src haskell :tangle "lab.hs"
-- los símbolos válidos son !#$%&*+./<=>?@\^|-~:
(#) :: Int -> Int -> Int
n # m = m + n * m
#+end_src

** Aplicación parcial
+ Solo pueden recibir un parámetro

#+begin_src haskell :tangle "lab.hs"
-- esta función se aplica un argumento a la vez
sumaMasTres :: Int -> Int -> Int
sumaMasTres x y = x + y + 3
#+end_src

+ Llamar ~sumaMasTres 1 2~ crea la función intermedia
#+begin_src haskell :tangle "lab.hs"
-- sumaMasTres 1 2 crea
sumaMasTres' :: Int -> Int
sumaMasTres' y = 1 + y + 3
-- y finalmente evalua 1 + 2 + 3 = 6
#+end_src

+ Y finalmente se evalua
#+begin_src haskell :tangle "lab.hs"
-- se puede tener una aplicación parcial explícita
mod5 :: Int -> Int
mod5 = (`mod` 5)
#+end_src

** Subexpresiones
+ ~sumaDos n~ se repite, pero se puede guardar en una expresión
#+begin_src haskell :tangle "lab.hs"
-- repetitivo
mulTupla :: Int -> (Int, Int) -> (Int, Int)
mulTupla n (a, b) = (sumaDos n * a, sumaDos n * b)
#+end_src

+ Usando ~let x = e1 in e2~
#+begin_src haskell :tangle "lab.hs"
-- más compacto
mulTupla' :: Int -> (Int, Int) -> (Int, Int)
mulTupla' n (a, b) =
  let m = sumaDos n in (m * a, m * b)
#+end_src

+ O ~e2 where x = e1~
#+begin_src haskell :tangle "lab.hs"
-- una alternativa
mulTupla'' :: Int -> (Int, Int) -> (Int, Int)
mulTupla'' n (a, b) =
  (m * a, m * b) where m = sumaDos n
#+end_src

** Funciones anónimas
+ Se llaman lambdas. ~\~ se parece a $\lambda$
#+begin_src haskell :tangle "lab.hs"
-- crear funciones desechables
cubosTupla :: (Int, Int) -> (Int, Int)
cubosTupla (a, b) =
  (cubo a, cubo b)
  where cubo = \x -> x^3
#+end_src

** Condiciones
+ Ambas ramas deben tener el mismo tipo
#+begin_src haskell :tangle "lab.hs"
-- amabas ramas mismo tipo
absoluto :: Float -> Float
absoluto x =
  if x < 0
     then -x
     else x
#+end_src

** Casos
+ ~_~ se puede usar para descartar el valor de un parámetro
#+begin_src haskell :tangle "lab.hs"
-- para evitar ifs anidados
bordeAlfabeto :: Char -> Bool
bordeAlfabeto c =
  case c of
    'a' -> True
    'z' -> True
    _ -> False
#+end_src

** Caza de patrones
+ Funciones parciales
#+begin_src haskell :tangle "lab.hs"
-- otra sintaxis para casos
bordeAlfabeto' :: Char -> Bool
bordeAlfabeto' 'a' = True
bordeAlfabeto' 'z' = True
bordeAlfabeto' _ = False
#+end_src

** Recursión
+ Pares
#+begin_src haskell :tangle "lab.hs"
-- función recursiva sencilla
par :: Int -> Bool
par 0 = True
par 1 = False
par n = par (n - 2)
#+end_src

+ Números de Fibonacci
#+begin_src haskell :tangle "lab.hs"
-- fibonacci
fib :: Int -> Int
fib 0 = 1
fib 1 = 1
fib n = fib (n - 1) + fib (n - 2)
#+end_src

** Guardias
+ Aplicar función booleana para decidir
+ Opción por omisión debe ser la última y usa la palabra reservada ~otherwise~
#+begin_src haskell :tangle "lab.hs"
-- otra manera de eveitar ifs anidados
grado :: Int -> String
grado g
  | g < 6 = "NA"
  | g <= 12 = "Primaria"
  | g <= 15 = "Secundaria"
  | g <= 18 = "Preparatoria"
  | otherwise = "Terminaste"
#+end_src

** Funciones de orden superior
+ Las funciones no son valores especiales
#+begin_src haskell :tangle "lab.hs"
-- funciones normales
f1 x = x + 1
f2 x = 2 * x
#+end_src

+ ~(.)~ es una función que compone funciones
#+begin_src haskell :tangle "lab.hs"
-- función hecha de la composición de otras funciones
h = f1 . f2
#+end_src

+ ~($)~ aplica funciones de forma infija con la mayor precedencia
#+begin_src haskell :tangle "lab.hs"
-- función hecha de la aplicación de otras funciones
k x = h . f1 . f2 $ x
#+end_src

* Listas
** Definición
+ Son recursivas
  - $[\ ]$ es la lista vacía
  - Si $l$ es una lista y $a$ un elemento, $a:l$ es una lista
+ Se denotan entre corchetes

#+begin_src haskell :tangle "lab.hs"
-- usando corchetes, como en python
lista = [1, 5, 8, 0]
#+end_src

** Caza de patrones
#+begin_src haskell :tangle "lab.hs"
multsDeCinco :: [Int] -> [Int]
-- se define para la lista vacía
multsDeCinco [] = []
-- y para elemento seguido de lista
multsDeCinco (x:xs) =
  if x `mod` 5 == 0
     then x:resto
     else resto
  where resto = multsDeCinco xs
#+end_src

** Operaciones básicas
+ Concatenar, cabeza, rabo, longitud
#+begin_src haskell :tangle "lab.hs"
-- algunas operaciones con listas
concatenada = [1, 2, 3] ++ [4, 5, 6]
cabeza = head [1, 2, 3]
rabo = tail [4, 5, 6]
longitud = length [8, 7, 6]
#+end_src

** Rangos
+ Inicio, (paso), final
#+begin_src haskell :tangle "lab.hs"
-- rango
diez = [1..10]

-- rango con paso
paresVeinte = [0, 2..20]
#+end_src

+ Crear listas infinitas
#+begin_src haskell :tangle "lab.hs"
-- no muere porque haskell es perezoso
quince = take 15 [1..]
#+end_src

** Comprensión
+ Como conjuntos
#+begin_src haskell :tangle "lab.hs"
-- lista de los números menores a n al cuadrado
cuadrados :: Int -> [Int]
cuadrados n = [m^2 | m <- [1..n]]

-- factore de un número usando listas por comprensión
facts :: Int -> [Int]
facts n = [m | m <- [1..n], n `mod` m == 0]
#+end_src

+ QuickSort
#+begin_src haskell :tangle "lab.hs"
-- otro ejemplo de listas por comprensión
quickSort [] = []
quickSort (x:xs) =
  let menores = [y | y <- xs, y <= x]
      mayores = [y | y <- xs, y > x]
  in quickSort menores ++ [x] ++ quickSort mayores
#+end_src

* Funciones sobre listas útiles
** Filtrar listas
#+begin_src haskell :tangle "lab.hs"
-- solo mayúsculas usando un filtro
mayusculas :: String -> String
mayusculas = filter (\x -> x `elem` ['A'..'Z'])

-- eliminar repeticiones usando un filtro
unicos :: Eq a => [a] -> [a]
unicos [] = []
unicos (x:xs) = x:unicos (eliminaX xs)
  where eliminaX = filter (/=x)

-- otro ejemplo de filtro
mulsFiltro :: [Int] -> [Int]
mulsFiltro = filter ((==0) . (`mod` 5))
#+end_src

** Aplicar una función a cada elemento

#+begin_src haskell :tangle "lab.hs"
-- sacar el inverso de los números de una lista
inversoRec :: [Int] -> [Int]
inversoRec [] = []
inversoRec (x:xs) = (-x):xs

-- misma función pero usando un mapeo
inversoMap :: Num a => [a] -> [a]
inversoMap = map negate
#+end_src

** Juntar todos los elementos con una operación

#+begin_src haskell :tangle "lab.hs"
-- suma recursiva
sumaRec :: Num a => [a] -> a
sumaRec [] = 0
sumaRec (x:xs) = x + sumaRec xs

-- suma usando reducción (fold)
sumaFold :: Num a => [a] -> a
sumaFold = foldr (+) 0

-- otro ejemplo de fold
mayor10 :: [Int] -> Bool
mayor10 = foldr (\x acc -> acc && x > 10) True
#+end_src

* Errores
** Irrecuperables (no realmente)
+ No tienen tipo
#+begin_src haskell :tangle "lab.hs"
-- explota
dividir n 0 = error "no se puede"
dividir n m = n `div` m
#+end_src

* Definir tipos
** Alias
+ Intercambiables con el tipo original
+ Mejorar legibilidad
#+begin_src haskell :tangle "lab.hs"
-- otro nombre para String
type Nombre = String
#+end_src

** Tipos algebraicos
+ Contructores y clases derivadas
#+begin_src haskell :tangle "lab.hs"
-- expresiones de sumas
data Expr = Val Int |
            Var Nombre |
            Suma Expr Expr deriving Eq
#+end_src

+ Implementando clases
#+begin_src haskell :tangle "lab.hs"
-- función para representar como cadena
instance Show Expr where
  show (Val val) = show val
  show (Var nombre) = nombre
  show (Suma e1 e2) = (show e1) ++ "+" ++ (show e2)
#+end_src

** Caza de patrones
+ Se puede hacer sobre tipos definidos
#+begin_src haskell :tangle "lab.hs"
-- Como se hacían con listas
subst :: Expr -> Nombre -> Int -> Expr
subst (Val v) _ _ = Val v
subst (Var n) m v =
  if n == m
     then (Var m)
     else Var n
subst (Suma e1 e2) m v =
  Suma (subst e1 m v) (subst e2 m v)
#+end_src

+ Otro ejemplo
#+begin_src haskell :tangle "lab.hs"
-- evaluar expresiones
eval :: Expr -> Int
eval (Val val) = val
eval (Var nombre) = 0
eval (Suma e1 e2) = (eval e1) + (eval e2)
#+end_src

** Tipos registro
+ Azucar para crear funciones de acceso
#+begin_src haskell :tangle "lab.hs"
-- un tipo con varios argumentos
data Color = RGB Int Int Int

-- repetitivo
getR :: Color -> Int
getR (RGB r _ _) = r

-- compacto
data RGBA = RGBA {
  r :: Int,
  g :: Int,
  b :: Int,
  a :: Int
}
#+end_src

* Valores opcionales
** ~Maybe~
+ No hay ~null~ (no hay referencias)
+ Lidiar explícitamente con valores faltantes
#+begin_src haskell :tangle "lab.hs"
-- nunca habrá NullPointerException
mensajeSeguro :: Maybe String -> String
mensajeSeguro (Just s) = "El mensaje es:" ++ s
mensajeSeguro Nothing = "Se perdió"
#+end_src
