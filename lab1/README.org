#+title: Algunos ejemplos de Haskell
#+author: Edgar Quiroz

* Instalación
+ Entrar a [[https://www.haskell.org/downloads/]] para instrucciones específicas del sistema operativo
+ Para Linux, lo más sencillo es usar [[https://www.haskell.org/ghcup/][ghcup]]
+ Vamos a usar ~ghc~ y ~stack~

* Programas básicos
** Hola Mundo
+ Los programas de Haskell tienen terminación ~.hs~
+ La función de entrada a los programas es ~main~

#+begin_src haskell
main = putStrLn "Hola mundo"
#+end_src

** Correr programas
+ Compilar y correr
#+begin_src sh
ghc hola.hs
./hola
#+end_src

+ O solo correr (no crea ejecutables)
#+begin_src sh
runghc hola.hs
#+end_src

** Saludar
+ Se obtiene información de la consola con ~getLine~

#+begin_src haskell
main = do
  nombre <- getLine
  putStrLn "¡Hola " ++ nombre ++ "!"
#+end_src

** Diferencia de suma de cuadrados
The sum of the squares of the first ten natural numbers is,

\[
    1^2 + 2^2 + \dots + 10^2 = 385
\]

The square of the sum of the first ten natural numbers is,

\[
    (1 + 2 + \dots + 10) = 55^2 = 3025
\]

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is $3025 - 385 = 2640$.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

*** Fórmulas
+ Suma de los $n$ primeros naturales
\[
\frac{n(n+1)}{2}
\]

+ Suma de los $n$ primeros cuadrados
\[
\frac{n(n+1)(2n+1)}{6}
\]

*** Código
#+begin_src haskell
sumN :: Int -> Int
sumN n = n*(n+1) `div` 2

sumSquares :: Int -> Int
sumSquares n = n * (n+1) * (2*n+1) `div` 6

diffSquares :: Int -> Int
diffSquares n = (sumN n)^2 - sumSquares n

main :: IO ()
main = print . diffSquares $ 100
#+end_src

** Múltiplo de 3 o 5
If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

+ Usando listas por comprensión

#+begin_src haskell
sumMults = sum [x | x <- [1..1000], x `mod` 5 == 0 || x `mod` 3 == 0]
#+end_src

+ Usando ~foldr~ y ~filter~

#+begin_src haskell
threeOrFive :: Int -> Bool
threeOrFive x = x `mod` 5 == 0 || x `mod` 3 == 0

sumMults = foldr (+) $ filter threeOrFive [1..1000]

main = print sumMults
#+end_src

** Fibonacci par
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

\[
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, \dots
\]

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

+ Forma recursiva
#+begin_src haskell
fib :: Int -> Int
fib 1 = 1
fib 2 = 2
fib n = fib (n-1) + fib (n-2)
#+end_src

+ Forma memoizada
#+begin_src haskell
next :: [Int] -> [Int]
next (a:b:xs) = a+b:a:b:xs

fibUpTo :: Int -> [Int] -> [Int]
fibUpTo n fibs =
  let (nextFib:others) = next fibs in
    if nextFib < n
    then fibUpTo n (nextFib:others)
    else fibs

main = print . sum . filter even $ fibUpTo 4000000 [2, 1]
#+end_src

** Factor primo más grande
The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143?

#+begin_src haskell
intSqrt :: Int -> Int
intSqrt = ceiling . sqrt . fromIntegral

factors :: Int -> [Int]
factors x = [f | f <- [1..(intSqrt x)], x `mod` f == 0]

prime :: Int -> Bool
prime x = (==1) . length . factors $ x

main = print . maximum . filter prime . factors $ 600851475143
#+end_src


* Práctica0: Repaso de Haskell
** Descargar
#+begin_src shell
git clone <repo>
#+end_src

** Ejercicios
+ Listas
+ Árboles
+ Cifrados
+ Descripciones detalladas en el /PDF/ de la práctica
+ También en el código fuente. Tiene muchos comentarios.

* Extra: projectos con Stack
** Crear proyecto y acciones básicas
+ Una buena plantilla básica es ~new-template~
#+begin_src shell
stack new <nombre> <plantilla>
#+end_src

+ Puedes compilar
#+begin_src shell
stack build
#+end_src

+ Correr tu código
#+begin_src shell
stack exec <ejecutable>
#+end_src

** Agregar depencencias
+ Agregar dependencia en ~packages.yaml~
#+begin_src yaml
dependencies:
- aquí
#+end_src

+ Si ~stack~ no tiene el paquete, habría además que agregarlo en ~stack.yaml~
#begin_src yaml
extra-deps:
- aqui
#+end_src

* Referencias
+ [[https://www.stackage.org][Stackage Server]]
+ [[https://www.haskell.org/downloads/][Haskell Downloads]]
+ [[https://projecteuler.net/][About - Project Euler]]
